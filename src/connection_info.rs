// Copyright 2015 MaidSafe.net limited.
//
// This SAFE Network Software is licensed to you under (1) the MaidSafe.net Commercial License,
// version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
// licence you accepted on initial access to the Software (the "Licences").
//
// By contributing code to the SAFE Network Software, or to this project generally, you agree to be
// bound by the terms of the MaidSafe Contributor Agreement, version 1.0.  This, along with the
// Licenses can be found in the root directory of this project at LICENSE, COPYING and CONTRIBUTOR.
//
// Unless required by applicable law or agreed to in writing, the SAFE Network Software distributed
// under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.
//
// Please review the Licences for the specific language governing permissions and limitations
// relating to use of the SAFE Network Software.

use std::io;
use std::net::UdpSocket;
use socket_addr::SocketAddr;
use connection::RaiiTcpAcceptor;
use static_contact_info::StaticContactInfo;

/// The result of a `Service::prepare_contact_info` call.
#[derive(Debug)]
pub struct ConnectionInfoResult {
    /// The token that was passed to `prepare_contact_info`.
    pub result_token: u32,
    /// The new contact info, if successful.
    pub result: io::Result<OurConnectionInfo>,
}

/// Contact info generated by a call to `Service::prepare_contact_info`.
#[derive(Debug)]
pub struct OurConnectionInfo(OurConnectionInfoInner);

impl OurConnectionInfo {
    /// Convert our connection info to theirs so that we can give it to peer
    pub fn to_their_connection_info(&self) -> TheirConnectionInfo {
        TheirConnectionInfo(TheirConnectionInfoInner {
            secret: self.0.secret.clone(),
            static_contact_info: self.0.static_contact_info.clone(),
            tcp_addrs: self.0.tcp_addrs.clone(),
            udp_addrs: self.0.udp_addrs.clone(),
        })
    }
}

// This is an ugly hack because of the limitation of the language for a c++ friend-like cocept:
// http://stackoverflow.com/questions/35142292/c-friend-like-construct-for-rust
/// Get the Inner contained structure - this is to allow the access of inner item to this crate but
/// not to other crates
pub trait GetOurConnectionInfoInner {
    /// Get inner item
    fn get_inner(&self) -> &OurConnectionInfoInner;
    /// Get mutable inner item
    fn get_inner_mut(&mut self) -> &mut OurConnectionInfoInner;
}

impl GetOurConnectionInfoInner for OurConnectionInfo {
    fn get_inner(&self) -> &OurConnectionInfoInner {
        &self.0
    }

    fn get_inner_mut(&mut self) -> &mut OurConnectionInfoInner {
        &mut self.0
    }
}

#[derive(Debug)]
pub struct OurConnectionInfoInner {
    pub secret: Option<[u8; 4]>,
    pub raii_tcp_acceptor: RaiiTcpAcceptor,
    pub tcp_addrs: Vec<SocketAddr>,
    pub udp_socket: UdpSocket,
    pub udp_addrs: Vec<SocketAddr>,
    pub static_contact_info: StaticContactInfo,
}

/// Contact info used to connect to another peer.
#[derive(Debug, RustcEncodable, RustcDecodable)]
pub struct TheirConnectionInfo(TheirConnectionInfoInner);

#[derive(Debug, RustcEncodable, RustcDecodable)]
pub struct TheirConnectionInfoInner {
    pub secret: Option<[u8; 4]>,
    pub static_contact_info: StaticContactInfo,
    pub tcp_addrs: Vec<SocketAddr>,
    pub udp_addrs: Vec<SocketAddr>,
}

// This is an ugly hack because of the limitation of the language for a c++ friend-like cocept:
// http://stackoverflow.com/questions/35142292/c-friend-like-construct-for-rust
/// Get the Inner contained structure - this is to allow the access of inner item to this crate but
/// not to other crates
pub trait GetTheirConnectionInfoInner {
    /// Get inner item
    fn get_inner(&self) -> &TheirConnectionInfoInner;
    /// Get mutable inner item
    fn get_inner_mut(&mut self) -> &mut TheirConnectionInfoInner;
}

impl GetTheirConnectionInfoInner for TheirConnectionInfo {
    fn get_inner(&self) -> &TheirConnectionInfoInner {
        &self.0
    }

    fn get_inner_mut(&mut self) -> &mut TheirConnectionInfoInner {
        &mut self.0
    }
}
